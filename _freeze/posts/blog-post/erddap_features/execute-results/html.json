{
  "hash": "7b5810af78d23c6e811b815fced4f6ac",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Useful ERDDAP features\"\nauthor: \"Sunny Hospital\"\ndate: \"11/13/2024\"\ndate-modified: \"11/13/2024\"\ncategories: [\"erddap\", \"data management\"]\nimage: \"fish.jpeg\"\nhtml:\n    format:\n        code-block-bg: true\n        code-block-border-left: \"#31BAE9\"\n---\n\n### Features\n\n* OutofDateDatasets provides [outOfDateDatasets.html](https://polarwatch.noaa.gov/erddap/outOfDateDatasets.html?&outOfDate%3E=0.5) \n\n\nRun the following command to install the necessary libraries:\n\n``` \n{bash}\n\npip install requests selenium webdriver_manager\n\n```\n\n2.  Setup WebDriver and Helper Functions\n\nSelenium is a tool that allows automated control of web browsers (Chrome, Firefox, Edge, etc). Here, we use Seleminum to launch the ERDDAP login page, handle Google login, and retrieve the session cookies.\n\n`webdriver_manager` helps to automatically download and set up the appropriate WebDriver (in this case Chrome).\n\n### Helper Functions\n\nTo access the ERDDAP dataset, we define three helper functions:\n\n* `get_browser_cookies(login_url)`: Opens Chrome to log into the ERDDAP server and retrieves the session cookies.\n* `authenticate_session(login_url)`: Uses the cookies from get_browser_cookies to create an authenticated session.\n* `download_data(session, data_url, outfile)`: Uses the authenticated session to access the dataset URL and save it to the specified output file.\n\n### Code\nHere is the code with comments for each part:\n\n```\n{python}\n\nimport requests  # For managing sessions and HTTP requests\nfrom selenium import webdriver  # For browser control\nfrom webdriver_manager.chrome import ChromeDriverManager  # To manage the browser driver\nfrom selenium.webdriver.chrome.service import Service as ChromeService\nfrom selenium.webdriver.chrome.options import Options\nimport time\n\n\ndef get_browser_cookies(url):\n    \"\"\"Retrieve cookies from the browser using Selenium.\"\"\"\n    \n    # Set Chrome options to suppress automation messages\n    chrome_options = Options()\n    chrome_options.add_argument(\"--disable-blink-features=AutomationControlled\")  # Disable automation message\n    chrome_options.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])  # Hide \"Chrome is controlled\" message\n    chrome_options.add_experimental_option(\"useAutomationExtension\", False)  # Disable the default automation extension\n\n    # Start the Chrome browser using webdriver-manager\n    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=chrome_options)\n\n    try:\n        # Navigate to the login page\n        driver.get(url)\n        \n        # Wait for the user to complete login (adjust time as needed)\n        time.sleep(60)  \n\n        # Retrieve cookies from the browser session\n        cookies = driver.get_cookies()\n        \n        # Verify cookies were retrieved successfully\n        if not cookies:\n            raise ValueError(\n                \"No cookies retrieved. Possible causes:\\n\"\n                \"- Insufficient sleep time; try increasing the sleep duration.\\n\"\n                \"- Incompatible or missing WebDriver for Chrome.\"\n            )\n\n        # Format cookies for session headers\n        formatted_cookies = \"; \".join([f\"{cookie['name']}={cookie['value']}\" for cookie in cookies])\n        print(\"Cookies Retrieved. Attempting to Access ERDDAP Dataset..\")\n        \n    finally:\n        # Close the browser\n        driver.quit()\n    \n    return formatted_cookies\n\ndef download_data(session, file_url, output_filename):\n    \"\"\"Download data file using the authenticated session.\"\"\"\n    response = session.get(file_url)\n\n    if response.status_code == 200:\n        print(\"Successfully downloaded data.\")\n\n        # Write the file content to disk\n        with open(output_filename, 'wb') as f:\n            f.write(response.content)\n        print(f\"Data saved to {output_filename}\")\n    else:\n        print(f\"Failed to download data. Status code: {response.status_code}\")\n        print(\"Response:\", response.text)\n\ndef authenticate_session(url):\n    \"\"\"Authenticate session and return the session object.\"\"\"\n    session = requests.Session()\n\n    # Get cookies from ERDDAP login page using Selenium\n    try:\n        cookie_header = get_browser_cookies(url)\n    except ValueError as e:\n        print(e)\n        exit(1)\n\n    # Set headers with cookies for authenticated requests\n    session.headers.update({\n        'User-Agent': 'Mozilla/5.0',\n        'Cookie': cookie_header\n    })\n    return session\n\n# Main Execution\nif __name__ == \"__main__\":\n\n    # ERDDAP login URL (through Google login)\n    login_url = \"https://polarwatch.noaa.gov/erddap/loginGoogle.html\"\n    \n    # ERDDAP data URL (direct link to dataset in .nc format)\n    data_url = [YOUR_ERDDAP_DATASET_URL]\n    \n    # Step 1: Authenticate Session\n    session = authenticate_session(login_url)\n\n    # Step 2: Download the data file and save as YOUR FILENAME\n    download_data(session, data_url, [FILENAME])\n\n\n```\n\n\n### Step-by-Step Usage\n\n1. Install Required Libraries: Make sure requests, selenium, and webdriver_manager are installed.\n2. Set Login URL and Data URL:\n    * The login_url is the ERDDAP login page (usually loginGoogle.html for Google login).\n    * The data_url points to the specific dataset you want to download.\n\n3. Run the Script:\n    * Run the script to open Chrome, log in to ERDDAP, retrieve cookies, and download the specified dataset.\n    * Adjust time.sleep(60) in get_browser_cookies to allow enough time for login if needed.\n\n### Usage Notes\n* Browser and Driver Compatibility: Ensure that ChromeDriver is compatible with your installed Chrome version. \nwebdriver_manager handles this automatically, but Chrome must be installed.\n* Alternative Browsers: This guide uses Chrome for simplicity, but Firefox and Edge are also supported with minor adjustments to the code.\n* Error Handling: The script checks if cookies were successfully retrieved. If not, it suggests potential issues.\n\n",
    "supporting": [
      "erddap_features_files"
    ],
    "filters": [],
    "includes": {}
  }
}